<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zy.dao.UserMapper">

    <!-- 不管是输出的pojo单个对象还是一个列表（list中包括pojo），在mapper.xml中resultType指定的类型是一样的。
         生成的动态代理对象中是根据mapper方法的返回值类型确定是调用selectOne(返回单个对象调用)还是selectList
         （返回集合对象调用 ）.
    -->
    <!-- 如果查询出来的列名和pojo的属性名不一致，通过定义一个resultMap对列名和pojo属性名之间作一个映射关系。
        id表示查询结果集中唯一标识
        result：对普通名映射定义
	 	column：查询出来的列名
	 	property：type指定的pojo类型中的属性名
     -->
    <resultMap id="BaseResultMap" type="com.zy.model.User">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="age" property="age" jdbcType="INTEGER"/>
    </resultMap>

    <!--
    使用association和collection完成一对一和一对多高级映射
    association: 将关联查询信息映射到一个pojo对象中的属性中。
    collection:  将关联查询信息映射到一个list集合中。
    -->
    <resultMap id="DetailResultMap" type="com.zy.model.User">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="age" property="age" jdbcType="INTEGER"/>
        <collection property="roles" ofType="com.zy.model.Role">
            <id column="rid" property="id" jdbcType="INTEGER"/>
            <result column="rname" property="name" jdbcType="VARCHAR"/>
            <result column="gibm" property="gibm" jdbcType="VARCHAR"/>
            <result column="userid" property="userid" jdbcType="INTEGER"/>
        </collection>
    </resultMap>


    <select id="selectUserRoles" resultMap="DetailResultMap" parameterType="java.lang.Integer">
        SELECT u.*,r.name rname,r.id rid,r.gibm FROM USER u, role r WHERE u.id=r.userid AND u.id=#{id,jdbcType=INTEGER};
    </select>

    <!--
     parameterType:指定输入参数的类型
     #{}标示一个占位符,
     #{value}其中value表示接收输入参数的名称，如果输入参数是简单类型，那么#{}中的值可以任意。
     -->
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from user where id = #{id,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="com.zy.model.User">
        insert into user (id, name, age)
        values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.zy.model.User">
        update userset name = #{name,jdbcType=VARCHAR},age = #{age,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <!--
    resultType：指定就是单条记录所映射的java对象类型
	${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。
	使用${}拼接sql，引起 sql注入
	${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
    -->
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select id, name, age from user where id = #{id,jdbcType=INTEGER}
    </select>

    <select id="selectAll" resultMap="BaseResultMap">
        select id, name, age from user
    </select>
</mapper>